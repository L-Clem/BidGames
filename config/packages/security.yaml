security:
  enable_authenticator_manager: true
  # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: "auto"
    App\Entity\Individual:
      algorithm: auto

  # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
  providers:
    app_user_provider:
      entity:
        class: App\Entity\Individual
        property: email
    # used to reload user from session & other features (e.g. switch_user)
    jwt:
      lexik_jwt:
        class: App\Entity\Individual
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    refresh:
      pattern: ^/api/token/refresh
      stateless: true

    login:
      pattern: ^/api/login
      stateless: true
      provider: app_user_provider
      json_login:
        check_path: /api/login
        success_handler: lexik_jwt_authentication.handler.authentication_success
        failure_handler: lexik_jwt_authentication.handler.authentication_failure
    api:
      provider: jwt
      pattern: ^/api
      stateless: true
      # anonymous: true
      guard:
        authenticators:
          - lexik_jwt_authentication.jwt_token_authenticator
    # main:
    #   lazy: true
    #   provider: app_user_provider
    #   json_login:
    #     check_path: api_login
    # logout:
    #   path: api_logout

    # activate different ways to authenticate
    # https://symfony.com/doc/current/security.html#the-firewall

    # https://symfony.com/doc/current/security/impersonating_user.html
    # switch_user: true

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    # - { path: ^/admin, roles: ROLE_ADMIN }
    # - { path: ^/profile, roles: ROLE_USER }
